import disnake
from disnake.ext import commands
from disnake.ui import View, Button, Modal, TextInput
from disnake import ApplicationCommandInteraction, TextInputStyle

from utils.logger_util import logger
from utils.role_check_util import check_trust_access

TICKET_CHANNEL_ID = 1371931353313968128
ANSWER_CHANNEL_ID = 1371936365075234876

class TicketModal(Modal):
    def __init__(self, user: disnake.User):
        self.user = user
        components = [
            TextInput(
                label="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –≤ –∫–ª–∏–µ–Ω—Ç–µ...",
                custom_id="description",
                style=TextInputStyle.paragraph,
                max_length=1000
            )
        ]
        super().__init__(title="–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        description = inter.text_values["description"]

        embed = disnake.Embed(
            description=f"## –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {inter.user.mention}\n" + description,
            color=disnake.Color.dark_purple()
        )
        embed.set_thumbnail(url=inter.user.avatar.url if inter.user.avatar else None)

        ticket_channel = inter.guild.get_channel(TICKET_CHANNEL_ID)

        if ticket_channel:
            view = ReplyButtonView(inter.user, description, None)
            message = await ticket_channel.send(embed=embed, view=view)
            view.message_to_delete = message

        await inter.response.send_message("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!", ephemeral=True)


class TicketButtonView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", style=disnake.ButtonStyle.primary, custom_id="open_ticket_form")
    async def ticket_button_callback(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(TicketModal(inter.user))

class CreateTicketCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="create_ticket", description="–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–∫–µ—Ç–æ–º")
    async def create_ticket(self, inter: ApplicationCommandInteraction):
        if not await check_trust_access(inter):
            return

        await inter.response.defer(ephemeral=True)

        embed_ru = disnake.Embed(
            description=(
                "üîî **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n"
                "–ü–æ–º–æ—â—å –ø–æ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!\n\n"
                "‚è∞ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã**\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–∏–∫–µ—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –±—É–¥–Ω—è–º –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ 7:00 - 22:00.\n\n"
                ":exclamation: **–í–∞–∂–Ω–æ**\n"
                "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã, –∏–Ω–∞—á–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º –æ—Ç–≤–µ—Ç."
            ),
            color=disnake.Color.red()
        )

        embed_eng = disnake.Embed(
            description=(
                "üîî **Support**\n"
                "Help with your questions. To create a ticket, click the button below!\n\n"
                "‚è∞ **Working hours**\n"
                "Please create tickets only on weekdays between 7:00 AM and 10:00 PM.\n\n"
                ":exclamation: **Important**\n"
                "Create your request with a detailed description of the problem, otherwise your request will be rejected!\n"
                "Make sure you have private messages enabled, otherwise the bot won't be able to send you a reply."
            ),
            color=disnake.Color.dark_purple()
        )

        await inter.channel.send(embeds=[embed_ru, embed_eng], view=TicketButtonView())

class ReplyModal(Modal):
    def __init__(self, user: disnake.User, issue_text: str, message_to_delete: disnake.Message):
        self.user = user
        self.issue_text = issue_text
        self.message_to_delete = message_to_delete


        components = [
            TextInput(
                label="–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...",
                custom_id="reply_text",
                style=TextInputStyle.paragraph,
                max_length=1000
            )
        ]
        super().__init__(title="–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ", components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        reply_text = inter.text_values["reply_text"]

        embed = disnake.Embed(
            description=(
                f"## –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ \n **–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞:**\n{self.issue_text}\n\n"
                f"**–û—Ç–≤–µ—Ç:**\n{reply_text}"
            ),

            color=disnake.Color.dark_purple()
        )
        embed.set_thumbnail(url=inter.user.avatar.url if inter.user.avatar else None)
        answer = disnake.Embed(
            title="–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
            description=(
                f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {self.user.mention}\n"
                f"**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {inter.user.mention}\n\n"
                f"**–ü—Ä–æ–±–ª–µ–º–∞:**\n{self.issue_text}\n\n"
                f"**–û—Ç–≤–µ—Ç:**\n{reply_text}"
            ),
            color=disnake.Color.dark_purple()
        )
        answer_channel = inter.guild.get_channel(ANSWER_CHANNEL_ID)
        try:
            await self.user.send(embed=embed)
            await inter.response.send_message("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", ephemeral=True)
            await answer_channel.send(embed=answer)
        except disnake.Forbidden:
            await inter.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã –õ–°.", ephemeral=True)
        finally:
            if self.message_to_delete:
                try:
                    await self.message_to_delete.delete()
                except Exception as e:
                    logger(f"Failed to delete request message:{e}")


class ReplyButtonView(View):
    def __init__(self, user: disnake.User, issue_text: str, message_to_delete: disnake.Message):
        super().__init__(timeout=None)
        self.user = user
        self.issue_text = issue_text
        self.message_to_delete = message_to_delete

    @disnake.ui.button(label="–û—Ç–≤–µ—Ç–∏—Ç—å", style=disnake.ButtonStyle.primary, custom_id="reply_to_ticket")
    async def reply_button_callback(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(ReplyModal(self.user, self.issue_text, self.message_to_delete))


def setup(bot):
    bot.add_cog(CreateTicketCog(bot))
